<!DOCTYPE html>
<html lang="id" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Events Management - ANRG Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- Quill Editor CSS -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    
    <style>
        .admin-sidebar {
            background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
        }
        .admin-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .admin-card:hover {
            box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
        }
        .sidebar-link {
            transition: all 0.3s ease;
        }
        .sidebar-link:hover {
            background-color: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }
        .sidebar-link.active {
            background-color: rgba(255, 255, 255, 0.2);
            border-left: 4px solid #10b981;
        }
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        .status-upcoming {
            background-color: #dbeafe;
            color: #1e40af;
        }
        .status-ongoing {
            background-color: #dcfce7;
            color: #166534;
        }
        .status-completed {
            background-color: #f3f4f6;
            color: #374151;
        }
        .status-cancelled {
            background-color: #fecaca;
            color: #991b1b;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background: white;
            border-radius: 12px;
            max-width: 90vw;
            max-height: 90vh;
            overflow-y: auto;
        }
        .ql-editor {
            min-height: 200px;
        }
        .image-preview {
            max-width: 100%;
            max-height: 200px;
            object-fit: cover;
            border-radius: 8px;
        }
        
        /* Sidebar Overlay for Mobile */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 35;
            display: none;
        }
        
        /* Mobile Responsive */
        @media (max-width: 1023px) {
            .sidebar-overlay.show {
                display: block;
            }
            
            .admin-sidebar {
                transform: translateX(-100%);
            }
            
            .admin-sidebar.open {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0 !important;
            }
        }
        
        /* Desktop Responsive */
        @media (min-width: 1024px) {
            .main-content {
                margin-left: 16rem; /* 256px = w-64 */
            }
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Admin Header -->
    <header class="bg-white shadow-md fixed w-full top-0 z-50">
        <div class="px-6 py-4 flex justify-between items-center">
            <div class="flex items-center">
                <button id="sidebar-toggle" class="lg:hidden mr-4 text-gray-600 hover:text-gray-900">
                    <i class="fas fa-bars text-xl"></i>
                </button>
                <h1 class="text-2xl font-bold text-gray-900">
                    <i class="fas fa-calendar-alt text-green-500 mr-2"></i>
                    Events Management
                </h1>
            </div>
            <div class="flex items-center space-x-4">
                <a href="/" class="text-gray-600 hover:text-gray-900 flex items-center">
                    <i class="fas fa-external-link-alt mr-2"></i>
                    View Site
                </a>
                <button onclick="logout()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors">
                    <i class="fas fa-sign-out-alt mr-2"></i>Logout
                </button>
            </div>
        </div>
    </header>

    <div class="flex pt-16">
        <!-- Sidebar Overlay (Mobile) -->
        <div id="sidebar-overlay" class="sidebar-overlay" onclick="toggleSidebar()"></div>
        
        <!-- Sidebar -->
        <aside id="sidebar" class="admin-sidebar w-64 min-h-screen fixed lg:relative lg:translate-x-0 transform -translate-x-full transition-transform duration-300 z-40">
            <div class="p-6">
                <nav class="space-y-2">
                    <a href="/admin" class="sidebar-link flex items-center px-4 py-3 text-white rounded-lg">
                        <i class="fas fa-tachometer-alt mr-3"></i>
                        Dashboard
                    </a>
                    <a href="/admin/news" class="sidebar-link flex items-center px-4 py-3 text-white rounded-lg">
                        <i class="fas fa-newspaper mr-3"></i>
                        News Management
                    </a>
                    <a href="/admin/events" class="sidebar-link active flex items-center px-4 py-3 text-white rounded-lg">
                        <i class="fas fa-calendar-alt mr-3"></i>
                        Events Management
                    </a>
                    <a href="/admin/team" class="sidebar-link flex items-center px-4 py-3 text-white rounded-lg">
                        <i class="fas fa-users mr-3"></i>
                        Team Management
                    </a>
                    <hr class="border-white/20 my-4">
                    <button id="logoutBtn" class="sidebar-link flex items-center px-4 py-3 text-white rounded-lg w-full text-left hover:bg-red-600 transition-colors duration-200">
                        <i class="fas fa-sign-out-alt mr-3"></i>
                        Logout
                    </button>
                </nav>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content flex-1 p-6">
            <!-- Page Header -->
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900">Events & Activities</h2>
                    <p class="text-gray-600">Manage laboratory events, conferences, and activities</p>
                </div>
                <button onclick="openModal('create')" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                    <i class="fas fa-plus mr-2"></i>
                    Add New Event
                </button>
            </div>

            <!-- Filters and Search -->
            <div class="admin-card p-6 mb-6">
                <div class="flex flex-wrap gap-4 items-center">
                    <div class="flex-1 min-w-64">
                        <input 
                            type="text" 
                            id="searchInput"
                            placeholder="Search events..."
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        >
                    </div>
                    <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                        <option value="">All Status</option>
                        <option value="upcoming">Upcoming</option>
                        <option value="ongoing">Ongoing</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                    </select>
                    <input 
                        type="month" 
                        id="monthFilter"
                        class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                    >
                    <button onclick="applyFilters()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg">
                        <i class="fas fa-filter mr-2"></i>Filter
                    </button>
                </div>
            </div>

            <!-- Events Table -->
            <div class="admin-card">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Event</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="eventsTableBody" class="bg-white divide-y divide-gray-200">
                            <!-- Event items will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-6">
                <div class="text-sm text-gray-700">
                    Showing <span id="showingStart">1</span> to <span id="showingEnd">10</span> of <span id="totalItems">0</span> entries
                </div>
                <div class="flex space-x-2" id="pagination">
                    <!-- Pagination buttons will be generated here -->
                </div>
            </div>
        </main>
    </div>

    <!-- Modal for Create/Edit Event -->
    <div id="eventModal" class="modal">
        <div class="modal-content w-full max-w-4xl p-6 m-4">
            <div class="flex justify-between items-center mb-6">
                <h3 id="modalTitle" class="text-2xl font-bold text-gray-900">Add New Event</h3>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <form id="eventForm" class="space-y-6">
                <input type="hidden" id="eventId" name="id">
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Event Title</label>
                        <input 
                            type="text" 
                            id="eventTitle" 
                            name="title"
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        >
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <select 
                            id="eventStatus" 
                            name="status"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                            <option value="upcoming">Upcoming</option>
                            <option value="ongoing">Ongoing</option>
                            <option value="completed">Completed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date</label>
                        <input 
                            type="date" 
                            id="eventDate" 
                            name="date"
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Time</label>
                        <input 
                            type="time" 
                            id="eventTime" 
                            name="time"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Location</label>
                        <input 
                            type="text" 
                            id="eventLocation" 
                            name="location"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Organizer</label>
                        <input 
                            type="text" 
                            id="eventOrganizer" 
                            name="organizer"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                    <textarea 
                        id="eventDescription" 
                        name="description"
                        rows="3"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    ></textarea>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Detailed Information</label>
                    <div id="eventContent" style="height: 300px;"></div>
                    <input type="hidden" id="eventContentHidden" name="content">
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Event Image</label>
                        <input 
                            type="file" 
                            id="eventImage" 
                            name="image"
                            accept="image/*"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                        <div id="imagePreview" class="mt-2 hidden">
                            <img id="previewImg" src="" alt="Preview" class="image-preview">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Registration Link</label>
                        <input 
                            type="url" 
                            id="eventRegistration" 
                            name="registrationLink"
                            placeholder="https://..."
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                        >
                    </div>
                </div>

                <div class="flex justify-end space-x-4">
                    <button type="button" onclick="closeModal()" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" class="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg">
                        <span id="submitBtnText">Save Event</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Overlay -->
    <div id="sidebar-overlay" class="fixed inset-0 bg-black opacity-50 z-30 lg:hidden hidden"></div>

    <!-- Quill Editor JS -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

    <script>
        // Global variables
        const token = localStorage.getItem('adminToken') || 'Bearer admin123';
        const API_BASE = '/api/admin';
        let currentPage = 1;
        let totalPages = 1;
        let eventsData = [];
        let quill;

        // Initialize Quill editor
        document.addEventListener('DOMContentLoaded', () => {
            // Sidebar toggle functionality
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');
            
            // Toggle sidebar function
            window.toggleSidebar = function() {
                sidebar.classList.toggle('open');
                overlay.classList.toggle('show');
            }
            
            // Add event listener to toggle button
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', toggleSidebar);
            }
            
            // Close sidebar when clicking outside on mobile
            overlay.addEventListener('click', toggleSidebar);
            
            // Initialize Quill editor
            quill = new Quill('#eventContent', {
                theme: 'snow',
                modules: {
                    toolbar: [
                        ['bold', 'italic', 'underline', 'strike'],
                        ['blockquote', 'code-block'],
                        [{ 'header': 1 }, { 'header': 2 }],
                        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                        [{ 'script': 'sub'}, { 'script': 'super' }],
                        [{ 'indent': '-1'}, { 'indent': '+1' }],
                        ['link', 'image'],
                        ['clean']
                    ]
                }
            });

            loadEvents();
            setupEventListeners();
        });

        // Setup event listeners
        function setupEventListeners() {
            // Image preview
            document.getElementById('eventImage').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        document.getElementById('previewImg').src = e.target.result;
                        document.getElementById('imagePreview').classList.remove('hidden');
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Form submission
            document.getElementById('eventForm').addEventListener('submit', handleFormSubmit);

            // Search
            document.getElementById('searchInput').addEventListener('input', debounce(applyFilters, 300));
        }

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Load events data
        async function loadEvents() {
            try {
                const response = await fetch(`${API_BASE}/events`, {
                    headers: { 'Authorization': token }
                });
                const data = await response.json();
                
                if (data.success) {
                    eventsData = data.data || [];
                    displayEvents(eventsData);
                    updatePagination();
                }
            } catch (error) {
                console.error('Error loading events:', error);
                showAlert('Failed to load events', 'error');
            }
        }

        // Display events in table
        function displayEvents(events) {
            const tbody = document.getElementById('eventsTableBody');
            
            if (events.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                            No events found
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = events.map(item => `
                <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4">
                        <div class="flex items-center">
                            ${item.image ? `<img src="/images/events/${item.image}" alt="" class="w-12 h-12 rounded-lg object-cover mr-4">` : ''}
                            <div>
                                <div class="text-sm font-medium text-gray-900">${item.title}</div>
                                <div class="text-sm text-gray-500">${item.description ? item.description.substring(0, 100) + '...' : ''}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900">${item.date}</div>
                        <div class="text-sm text-gray-500">${item.time || '-'}</div>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">${item.location || '-'}</td>
                    <td class="px-6 py-4">
                        <span class="status-badge status-${item.status}">${item.status}</span>
                    </td>
                    <td class="px-6 py-4 text-sm font-medium">
                        <button onclick="openModal('edit', '${item.id}')" class="text-green-600 hover:text-green-900 mr-3">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteEvent('${item.id}')" class="text-red-600 hover:text-red-900">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // Apply filters
        function applyFilters() {
            const search = document.getElementById('searchInput').value.toLowerCase();
            const status = document.getElementById('statusFilter').value;
            const month = document.getElementById('monthFilter').value;

            const filtered = eventsData.filter(item => {
                const matchSearch = item.title.toLowerCase().includes(search) || 
                                  (item.description && item.description.toLowerCase().includes(search));
                const matchStatus = !status || item.status === status;
                const matchMonth = !month || item.date.startsWith(month);
                
                return matchSearch && matchStatus && matchMonth;
            });

            displayEvents(filtered);
        }

        // Open modal
        function openModal(mode, id = null) {
            const modal = document.getElementById('eventModal');
            const title = document.getElementById('modalTitle');
            const form = document.getElementById('eventForm');
            
            if (mode === 'create') {
                title.textContent = 'Add New Event';
                form.reset();
                document.getElementById('eventId').value = '';
                document.getElementById('imagePreview').classList.add('hidden');
                quill.setContents([]);
            } else if (mode === 'edit' && id) {
                title.textContent = 'Edit Event';
                loadEventForEdit(id);
            }
            
            modal.classList.add('show');
        }

        // Close modal
        function closeModal() {
            document.getElementById('eventModal').classList.remove('show');
        }

        // Load event for editing
        async function loadEventForEdit(id) {
            try {
                const response = await fetch(`${API_BASE}/events/${id}`, {
                    headers: { 'Authorization': token }
                });
                const data = await response.json();
                
                if (data.success) {
                    const event = data.data;
                    document.getElementById('eventId').value = event.id;
                    document.getElementById('eventTitle').value = event.title;
                    document.getElementById('eventStatus').value = event.status;
                    document.getElementById('eventDate').value = event.date;
                    document.getElementById('eventTime').value = event.time || '';
                    document.getElementById('eventLocation').value = event.location || '';
                    document.getElementById('eventOrganizer').value = event.organizer || '';
                    document.getElementById('eventDescription').value = event.description || '';
                    document.getElementById('eventRegistration').value = event.registrationLink || '';
                    
                    // Set content in Quill editor
                    quill.root.innerHTML = event.content || '';
                    
                    // Show image preview if exists
                    if (event.image) {
                        document.getElementById('previewImg').src = `/images/events/${event.image}`;
                        document.getElementById('imagePreview').classList.remove('hidden');
                    }
                }
            } catch (error) {
                console.error('Error loading event for edit:', error);
                showAlert('Failed to load event data', 'error');
            }
        }

        // Handle form submission
        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const id = formData.get('id');
            
            // Get content from Quill editor
            formData.set('content', quill.root.innerHTML);
            
            const isEdit = !!id;
            const url = isEdit ? `${API_BASE}/events/${id}` : `${API_BASE}/events`;
            const method = isEdit ? 'PUT' : 'POST';
            
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: { 'Authorization': token },
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert(isEdit ? 'Event updated successfully' : 'Event created successfully', 'success');
                    closeModal();
                    loadEvents();
                } else {
                    showAlert(data.message || 'Failed to save event', 'error');
                }
            } catch (error) {
                console.error('Error saving event:', error);
                showAlert('Failed to save event', 'error');
            }
        }

        // Delete event
        async function deleteEvent(id) {
            if (!confirm('Are you sure you want to delete this event?')) {
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE}/events/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': token }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Event deleted successfully', 'success');
                    loadEvents();
                } else {
                    showAlert(data.message || 'Failed to delete event', 'error');
                }
            } catch (error) {
                console.error('Error deleting event:', error);
                showAlert('Failed to delete event', 'error');
            }
        }

        // Update pagination
        function updatePagination() {
            document.getElementById('totalItems').textContent = eventsData.length;
            document.getElementById('showingStart').textContent = eventsData.length > 0 ? 1 : 0;
            document.getElementById('showingEnd').textContent = eventsData.length;
        }

        // Show alert
        function showAlert(message, type = 'success') {
            // Create alert element
            const alert = document.createElement('div');
            alert.className = `fixed top-20 right-4 z-50 p-4 rounded-lg max-w-sm ${
                type === 'success' ? 'bg-green-100 text-green-700 border border-green-300' : 'bg-red-100 text-red-700 border border-red-300'
            }`;
            alert.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(alert);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                alert.remove();
            }, 3000);
        }

        // Logout function
        function logout() {
            localStorage.removeItem('adminToken');
            window.location.href = '/admin/login';
        }

        // Logout button event listener for sidebar
        document.addEventListener('DOMContentLoaded', function() {
            const logoutBtn = document.getElementById('logoutBtn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to logout?')) {
                        logout();
                    }
                });
            }
        });
    </script>
</body>
</html>
